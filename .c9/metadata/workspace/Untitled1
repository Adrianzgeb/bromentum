{"changed":true,"filter":false,"title":"Untitled1","tooltip":"/Untitled1","value":"//\n// # SimpleServer\n//\n// A simple chat server using Socket.IO, Express, and Async.\n//\nvar http = require('http');\nvar path = require('path');\n\nvar async = require('async');\nvar socketio = require('socket.io');\nvar express = require('express');\n\n//\n// ## SimpleServer `SimpleServer(obj)`\n//\n// Creates a new instance of SimpleServer with the following options:\n//  * `port` - The HTTP port to listen on. If `process.env.PORT` is set, _it overrides this value_.\n//\nvar router = express();\nvar server = http.createServer(router);\nvar io = socketio.listen(server);\n\nrouter.use(express.static(path.resolve(__dirname, 'client')));\nvar messages = [];\nvar sockets = [];\n\nio.on('connection', function (socket) {\n    messages.forEach(function (data) {\n      socket.emit('message', data);\n    });\n\n    sockets.push(socket);\n\n    socket.on('disconnect', function () {\n      sockets.splice(sockets.indexOf(socket), 1);\n      updateRoster();\n    });\n\n    socket.on('message', function (msg) {\n      var text = String(msg || '');\n\n      if (!text)\n        return;\n\n      socket.get('name', function (err, name) {\n        var data = {\n          name: name,\n          text: text\n        };\n\n        broadcast('message', data);\n        messages.push(data);\n      });\n    });\n\n    socket.on('identify', function (name) {\n      socket.set('name', String(name || 'Anonymous'), function (err) {\n        updateRoster();\n      });\n    });\n  });\n\nfunction updateRoster() {\n  async.map(\n    sockets,\n    function (socket, callback) {\n      socket.get('name', callback);\n    },\n    function (err, names) {\n      broadcast('roster', names);\n    }\n  );\n}\n\nfunction broadcast(event, data) {\n  sockets.forEach(function (socket) {\n    socket.emit(event, data);\n  });\n}\n\nserver.listen(process.env.PORT || 3000, process.env.IP || \"0.0.0.0\", function(){\n  var addr = server.address();\n  console.log(\"Chat server listening at\", addr.address + \":\" + addr.port);\n});","undoManager":{"mark":-1,"position":0,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":2}},"text":"//"},{"action":"insertText","range":{"start":{"row":0,"column":2},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":83,"column":0}},"lines":["// # SimpleServer","//","// A simple chat server using Socket.IO, Express, and Async.","//","var http = require('http');","var path = require('path');","","var async = require('async');","var socketio = require('socket.io');","var express = require('express');","","//","// ## SimpleServer `SimpleServer(obj)`","//","// Creates a new instance of SimpleServer with the following options:","//  * `port` - The HTTP port to listen on. If `process.env.PORT` is set, _it overrides this value_.","//","var router = express();","var server = http.createServer(router);","var io = socketio.listen(server);","","router.use(express.static(path.resolve(__dirname, 'client')));","var messages = [];","var sockets = [];","","io.on('connection', function (socket) {","    messages.forEach(function (data) {","      socket.emit('message', data);","    });","","    sockets.push(socket);","","    socket.on('disconnect', function () {","      sockets.splice(sockets.indexOf(socket), 1);","      updateRoster();","    });","","    socket.on('message', function (msg) {","      var text = String(msg || '');","","      if (!text)","        return;","","      socket.get('name', function (err, name) {","        var data = {","          name: name,","          text: text","        };","","        broadcast('message', data);","        messages.push(data);","      });","    });","","    socket.on('identify', function (name) {","      socket.set('name', String(name || 'Anonymous'), function (err) {","        updateRoster();","      });","    });","  });","","function updateRoster() {","  async.map(","    sockets,","    function (socket, callback) {","      socket.get('name', callback);","    },","    function (err, names) {","      broadcast('roster', names);","    }","  );","}","","function broadcast(event, data) {","  sockets.forEach(function (socket) {","    socket.emit(event, data);","  });","}","","server.listen(process.env.PORT || 3000, process.env.IP || \"0.0.0.0\", function(){","  var addr = server.address();","  console.log(\"Chat server listening at\", addr.address + \":\" + addr.port);"]},{"action":"insertText","range":{"start":{"row":83,"column":0},"end":{"row":83,"column":3}},"text":"});"}]}]]},"ace":{"folds":[],"scrolltop":737,"scrollleft":0,"selection":{"start":{"row":83,"column":3},"end":{"row":83,"column":3},"isBackwards":false},"options":{"tabSize":4,"useSoftTabs":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":55,"state":"start","mode":"ace/mode/text"}},"timestamp":false}